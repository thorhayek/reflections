q1) what happens when you initialize a repository? why do you need to do it ?
a1) a hidden directory .git. It contains  metadata about the history of the repository. it makes a folder into a git repository. we need to use the git init command
q2) how is the staging area different from the working directory and the repository ? what value do you think it offers ? 
a2) staging area is the place where files that are ready for commit are placed whereas working directory contains all the files. It enables commit to be small logical units instead of large mix of changes
q3) How can you use the staging area to make sure you have one commit per logical change?
a3) Add only those files to the stage area that form a small logical unit.
q4) what are some situations when branches would be helpful in keeping your history organized? how would branches help?
a4)Branch is basically a label on the current commit. It moves forward with each commmit like Head, but unlike head the old commits retain the labe, i.e all commits retain the branch label as long as that branch is checked out. It is possible for one commit to be part of two branches aka have two labels , this happens mostly when we newly create a branch.branches are useful when working on an experimental feature, and we dont want the main prod version to be affected. It is also useful for collaboration. i.e any bug and feature is done on a new branch. Allows you to sync to latest changes ( git pull, git fetch), without affecting current work. makes it easier to merge changes e.g. send out code reviews with your changes only before checkin to server repository. because in git your changes and  checkins happen locally before sending out reviews. so there is no way to share your changes with the server r before commits (server is not aware, in tfs all my changes are saved on the server, code flow uses that) and after commits if both you and your colleague changes will be pushed to same remote branch, causing CF discrepancies and merge issues before publishing to the remote branch. 
q5) how do diagrams help you visualize the branch structure?
a5) diagrams help us understand the reachability of a commit as well as the history of the commits from all the branches arranged in chronological order. for merged branches it visually help us differentiate the commits in each branch.
q6) what is the result of merging two branches together ? why do we present it in the diagram the way we do?
a6) by merging two branches we merge the history + edits made to repository. Drawing it in a diagram helps us to visualize and hence understand the merging process.
q7) what are the pros and cons of gits automatic merging vs always doing merges manually
a7) automatic merges take care of simple merges where there is no conflict, i.e the two commits/branches being merged dont have changes in the same area. git places it extra safe while merging and sometimes misses out on mergin simple conflicts. 