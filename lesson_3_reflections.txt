q1) When would you want to use a remote repository rather than keeping all your work local?
a1) a remote repository is required when you are working from multiple machines or when you are collaborating with other people. It also helps against losing your changes due to hard disk crash or other unforseen events.
q2)why might you want to pull changes manually rather than git having automatically stay up to date with your remote repository?
a2) Pulling is required when we make changes from another machine or when one of our collaborators has pushed / commited changes .(push transfers last commit(s) to a remote server , commit adds changes to your local repo.)
q3) Describe the difference between forks, clones and branches. When would you use one instead of another?
a3) fork is clone + linking(link to the original forked repository) on git hub server. you cannot fork local repositories. clone is making a copy of an existing repository, the existing repository can be local or remote(e.g. github). branching is adding a new label on your local repository for experimental changes/feature work. branching creates a new branch (default branch is master and creating a new branch will add a new label and changes you make there wont be accesible in master unless you merge them).
q4) what is the benefit of having a copy of the last know state of the remote stored locally?
a4) It allows us to compare and synchronize the origin branch with our local branch. It is especially helpful when we have to merge conflicts between remote and local repositories as it allows us to add the remote changes in a different branch and then merge them.
q5) How would you collaborate without using git or github ? what would be easier and what would be harder?
a5) collaboration without using git would lead to versioning hell and without github it will be hard to keep changes in sync among the collaborators. The only minor disadvantage of git/github is that users will have a to climb through a brief learning curve to get familiar with the concepts. 
q6) when would you want to make changes in a separate branch rather than directly in master? what benefits does each approach have?
a6) it makes sense to make changes in a separte branch rather then directly when we are collaborating with multiple people and each of us are working on a separate feature e.g team projects or when contributing to open source. We work directly with master when we are working on our personal projects because in this scenario there is no risk of merge conflict and we dont have to get our changes reviewed before merging to master. The benefits of the first approach is that ensure code is stable at all times. the benefit of second is that we dont have the hassle of creating pull requests or manually merging conflicts. Another benefit of making change in a separate branch-when contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the fork. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.